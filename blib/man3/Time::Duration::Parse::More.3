.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::Duration::Parse::More 3"
.TH Time::Duration::Parse::More 3 "2013-01-05" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Duration::Parse::More \- parse natural language time duration expressions
.SH "VERSION"
.IX Header "VERSION"
version 0.002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Time::Duration::Parse::More;
\&
\&    my ($seconds);
\&    $seconds = parse_duration(\*(Aq1 minute, 30 seconds\*(Aq); ## 90
\&    $seconds = parse_duration(\*(Aq1 minute plus 15 seconds\*(Aq); ## 75
\&    $seconds = parse_duration(\*(Aq1 minute minus 15 seconds\*(Aq); ## 45
\&    $seconds = parse_duration(\*(Aq1 day minus 2.5 hours and 10 minutes plus 15 seconds\*(Aq); ## 76815
\&    $seconds = parse_duration(\*(Aqminus 15 seconds\*(Aq); ## \-15
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module parses a limited set of natural language expressions and
converts them into seconds.
.PP
It is backwards compatible with Time::Duration::Parse (passes the
same test cases), but adds more expressions and memoization.
.PP
At the moment, the module is limited to english language expressions.
.SS "Rules"
.IX Subsection "Rules"
The following rules are used to parse the expressions:
.IP "\(bu" 4
horizantal white-space, commas and the token \fIand\fR are ignored;
.IP "\(bu" 4
an expresion in the form \f(CW\*(C`N factor\*(C'\fR is translated to
\&\f(CW\*(C`N * factor_in_seconds\*(C'\fR. \f(CW\*(C`factor\*(C'\fR is optional, defaults to \fIseconds\fR.
Negative and fractional values of \f(CW\*(C`N\*(C'\fR are suported. Singular, plural
and single letter versions of \f(CW\*(C`factor\*(C'\fR are understood. All are
case-insensitive \fBexcept\fR the single letter versions;
.IP "\(bu" 4
expressions in the form \f(CW\*(C`hh:mm:ss\*(C'\fR, \f(CW\*(C`hh:mm\*(C'\fR are also supported;
.IP "\(bu" 4
the tokens \fIplus\fR or \fIminus\fR change the signal of the expressions that
follow them;
.IP "\(bu" 4
the final value is the sum of all the expressions
taking in account the sign defined by the previous rule.
.SS "Factors"
.IX Subsection "Factors"
The following factors are understood, with the corresponding value in seconds between parentesis:
.IP "\(bu" 4
seconds (1): s, second, seconds, sec, and secs;
.IP "\(bu" 4
minutes (60): m, minute, minutes, min, and mins;
.IP "\(bu" 4
hours (60 * minutes factor): h, hr, hour, and hours;
.IP "\(bu" 4
days (24 * hours factor): d, day, and days;
.IP "\(bu" 4
weeks (7 * days factor): w, week, and weeks;
.IP "\(bu" 4
months (30 * days factor): M (note the case), month and months;
.IP "\(bu" 4
years (365 * days factor): y, year, and years;
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "parse_duration"
.IX Subsection "parse_duration"
.Vb 1
\&    $seconds = parse_duration($expression);
.Ve
.PP
Given an \f(CW$expression\fR in natural lanaguage returns the number of
seconds it represents. This result is cached so future calls with the
same expression will be faster.
.PP
If the expression cannot be parsed, \f(CW\*(C`parse_duration\*(C'\fR will croak.
.SS "parse_duration_nc"
.IX Subsection "parse_duration_nc"
Same as \*(L"parse_duration\*(R", but the result will not be cached.
.SH "HISTORY"
.IX Header "HISTORY"
This module started as a private module for a closed-source project. I
started to release it as \f(CW\*(C`Time::Delta\*(C'\fR when I discovered
Time::Duration::Parse. I updated the \s-1API\s0 to match it, and added my
own improvements. This is the result.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Time::Duration::Parse and Time::Duration.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Time::Duration::Parse::More
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
<http://www.cpantesters.org/distro/T/Time\-Duration\-Parse\-More>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=Time\-Duration\-Parse\-More>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=Time::Duration::Parse::More>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
<http://cpanratings.perl.org/d/Time\-Duration\-Parse\-More>
.SS "Email"
.IX Subsection "Email"
You can email the author of this module at \f(CW\*(C`MELO at cpan.org\*(C'\fR asking for help with any problems you have.
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-time\-duration\-parse\-more at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/Public/Dist/Display.html?Name=Time\-Duration\-Parse\-More>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
<https://github.com/melo/perl\-time\-duration\-parse\-more>
.PP
.Vb 1
\&  git clone https://github.com/melo/perl\-time\-duration\-parse\-more.git
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Stole test cases and other small tidbits from Miyagawa's Time::Duration::Parse.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pedro Melo <melo@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by Pedro Melo.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
